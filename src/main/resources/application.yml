server:
  http: "\${SERVER_PORT:8080}"

spring:
  application:
    name: ${artifactId}
    version: ${version}
  jmx.enabled: true
  threads:
    virtual:
      enabled: "\${VIRTUAL_THREADS_ENABLED:true}"
  data:
    mongodb:
      uri: "\${MONGODB_URI:mongodb://localhost:27017}"
      database: "\${MONGODB_DBNAME:payhub}"
      # custom configured properties
      config:
        connectionPool:
          maxSize: "\${MONGODB_CONNECTIONPOOL_MAX_SIZE:100}"
          minSize: "\${MONGODB_CONNECTIONPOOL_MIN_SIZE:0}"
          maxWaitTimeMS: "\${MONGODB_CONNECTIONPOOL_MAX_WAIT_MS:120000}"
          maxConnectionLifeTimeMS: "\${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_LIFE_MS:0}"
          maxConnectionIdleTimeMS: "\${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_IDLE_MS:120000}"
          maxConnecting: "\${MONGODB_CONNECTIONPOOL_MAX_CONNECTING:2}"

management:
  endpoints:
    jmx:
      exposure.include: "*"
    web:
      exposure:
        include: health, info, prometheus, metrics
      base-path: /actuator
  endpoint:
    health:
      probes.enabled: true
      logging.slow-indicator-threshold: "\${HEALTH_ACTUATOR_LOGGER_TIMEOUT_DURATION:PT1S}"
      group:
        readiness.include: "*"
        liveness.include: livenessState,diskSpace,ping
    prometheus:
      enabled: true
  metrics:
    tags:
      application: ${artifactId}
    export:
      prometheus:
        enabled: true
        step: 1m
        descriptions: true
    enable:
      jvm: true
      process: true
      system: true
      http: true
      logback: true

logging:
  level:
    root: "\${LOG_LEVEL_ROOT:INFO}"
    it.gov.pagopa: "\${LOG_LEVEL_PAGOPA:INFO}"
    org.springframework: "\${LOG_LEVEL_SPRING:INFO}"
    org.springframework.boot.availability: "\${LOG_LEVEL_SPRING_BOOT_AVAILABILITY:DEBUG}"
    it.gov.pagopa.pu.send.exception.SendNotificationExceptionHandler: "\${LOGGING_LEVEL_API_REQUEST_EXCEPTION:INFO}"
    org.springdoc.core.utils.SpringDocAnnotationsUtils: "\${LOG_LEVEL_SPRING_DOC:ERROR}"
    PERFORMANCE_LOG: "\${LOG_LEVEL_PERFORMANCE_LOG:INFO}"
    PERFORMANCE_LOG.API_REQUEST: "\${LOG_LEVEL_PERFORMANCE_LOG_API_REQUEST:\${logging.level.PERFORMANCE_LOG}}"
    PERFORMANCE_LOG.REST_INVOKE: "\${LOG_LEVEL_PERFORMANCE_LOG_REST_INVOKE:\${logging.level.PERFORMANCE_LOG}}"

springdoc:
  writer-with-default-pretty-printer: true

jwt:
  access-token:
    public-key: "\${JWT_TOKEN_PUBLIC_KEY:-----BEGIN PUBLIC KEY-----
                  MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsyutJMN8Rc4gOpnjYpKO
                  SFUoBo7eOMGThwpDaFDoHAbihwsYwIG3f5sbT1hhseSA31nqRZwiOJO7Sf55cI1Q
                  1pA7hcUehYBb6M06kjV42D8dnOuJjR0oNgajgclkfTayvHy21BIYo34lzRvvCszW
                  0u1yLxGFP0PROnFdY3rgUpXus0/du0Of5gEazmclYw+qsrju8iZM7932ZbqPUy5V
                  ulWrE/iI7DYQT9tnJEaI5qtSY8KbneVL/RH9FabM97gT5ntmS27bwOjEaFYEU4R5
                  DXyX8coB+giRmZ+nffi8kIqZrbptiLHXE/mg3VRdX7XFF6UNsDkobw3xMJcMErsi
                  ewIDAQAB
                  -----END PUBLIC KEY-----}"

rest:
  default-timeout:
    connect-millis: "\${DEFAULT_REST_CONNECT_TIMEOUT_MILLIS:120000}"
    read-millis: "\${DEFAULT_REST_READ_TIMEOUT_MILLIS:120000}"
  send:
    api-key: "\${PU_SEND_API_KEY:}"
  pagopa:
    send:
      base-url: "\${SEND_BASE_URL:}"
      max-attempts: "\${SEND_MAX_ATTEMPTS:3}" # It's counting also the first attempt
      wait-time-millis: "\${SEND_WAIT_TIME_MILLIS:500}"
      print-body-when-error: "\${SEND_PRINT_BODY_WHEN_ERROR:true}"
